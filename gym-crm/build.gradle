plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.epam'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    log4jVersion = '2.24.3'
    lombokVersion = '1.18.36'
    jakartaAnnotationVersion = '2.1.1'
    jakartaValidationVersion = '3.1.0'
    hibernateValidatorVersion = '8.0.1.Final'
    mapstructVersion = '1.6.3'
    commonsLangVersion = '3.17.0'
    instancioVersion = '5.4.1'
    springDocVersion = '2.8.6'
    jwtVersion = '0.12.6'
    springCloudOpenFeign = '4.2.1'
    springEurekaClient = '4.2.1'
    springCloudVersion = "2024.0.1"
    circuitBreaker = '2.3.0'
    fasterXml = '2.19.0'

}

dependencies {

    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.4.4'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: springDocVersion
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: springCloudOpenFeign

    // data type support
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: fasterXml


    // ActiveMQ
    implementation 'org.springframework.boot:spring-boot-starter-activemq'

    // eureka
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-eureka-client', version: springEurekaClient


    // prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // circuit breaker
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'

    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Lombok
    implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    // Jakarta API
    implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: jakartaAnnotationVersion
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: jakartaValidationVersion
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: hibernateValidatorVersion

    // MapStruct
    implementation group: 'org.mapstruct', name: 'mapstruct', version: mapstructVersion
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapstructVersion

    // Apache Commons
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: commonsLangVersion


    // test
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation group: 'org.instancio', name: 'instancio-junit', version: instancioVersion
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: jwtVersion
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: jwtVersion
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: jwtVersion
}

jacoco {
    toolVersion = '0.8.10'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(tasks.named("jacocoTestReport"))
}

jacocoTestReport {
    reports {
        html.required.set(true)
    }
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}